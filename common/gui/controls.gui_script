
local curveworld = require "curveworld.curveworld"

local pointer = require "pointer_lock.pointer"
local LOCK_POINTER = hash("touch")
local UNLOCK_POINTER = hash("unlock pointer")

local hoverColor = vmath.vector4(0.8, 0.8, 0.8, 1)
local normalColor
local sliderLength

local increment = 0.04
local zero_snap_dist = 0.00005

local function lock_mouse_on_interaction(self)
	if not pointer.locked and not self.hoveredSlider then
		window.set_mouse_lock(true)
	end
end

local function update_pointer_lock_state()
	pointer.locked = window.get_mouse_lock()
end

local function Slider(prop_name, text_format)
	return {
		node = gui.get_node(prop_name .. " slider"),
		text_node = gui.get_node(prop_name .. " text"),
		prop = prop_name,
		text = text_format
	}
end

function init(self)
	msg.post("#", "post_init")
	self.sliders = {
		Slider("z", "Z-axis Curvature: %f"),
		Slider("x", "X-axis Curvature: %f"),
		Slider("horiz", "Horizontal Shear: %f"),
	}
	normalColor = gui.get_color(self.sliders[1].node)
	sliderLength = gui.get_size(gui.get_parent(self.sliders[1].node)).x

	if html5 then
		html5.set_interaction_listener(lock_mouse_on_interaction)
	end
end

function final(self)
	if html5 then
		html5.set_interaction_listener(nil)
	end
end

local function hit_check_sliders(self, x, y)
	for i,s in ipairs(self.sliders) do
		if gui.pick_node(s.node, x, y) then
			return s
		end
	end
end

function update(self, dt)
	if html5 then
		-- If user presses "esc" to exit pointer lock then web browsers don't fire "input" event.
		-- That's why we have to check the pointer lock status in the update loop.
		update_pointer_lock_state()
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("post_init") then
		msg.post(".", "acquire_input_focus") -- Make sure we're on top of the stack.
	end
end

local function unhover(node)
	gui.set_color(node, normalColor)
end

local function hover(node)
	gui.set_color(node, hoverColor)
end

local function sign(x)
	return x >= 0 and 1 or -1
end

local function update_cursor(self, action)
	if self.isDragging then
		local pos = gui.get_position(self.hoveredSlider.node)
		pos.x = math.max(0, math.min(action.screen_x + self.dragOX, sliderLength))
		gui.set_position(self.hoveredSlider.node, pos)
		local k = (pos.x/sliderLength - 0.5) * 2
		k = k*k*sign(k)
		local value = k*increment
		if math.abs(value) <= zero_snap_dist then  value = 0  end
		if self.hoveredSlider.prop == "z" then
			curveworld.set_curve(value)
		elseif self.hoveredSlider.prop == "x" then
			curveworld.set_curve(nil, value)
		elseif self.hoveredSlider.prop == "horiz" then
			curveworld.set_curve(nil, nil, value)
		end
		gui.set_text(self.hoveredSlider.text_node, self.hoveredSlider.text:format(value))
	else
		local slider = hit_check_sliders(self, action.x, action.y)
		if self.hoveredSlider and slider ~= self.hoveredSlider then
			unhover(self.hoveredSlider.node)
			self.hoveredSlider = nil
		end
		if slider then
			self.hoveredSlider = slider
			hover(slider.node)
		end
	end
end

function on_input(self, action_id, action)
	if not action_id then
		update_cursor(self, action)
	elseif action_id == hash("touch") then
		if action.pressed then
			if self.hoveredSlider then
				self.isDragging = true
				local pos = gui.get_position(self.hoveredSlider.node)
				self.dragOX = pos.x - action.screen_x
				return true
			end
		elseif action.released then
			if self.hoveredSlider then
				self.isDragging = false
				update_cursor(self, action)
				return true
			end
		end
	end

	if html5 then
		if pointer.locked and action_id == UNLOCK_POINTER and action.released then
			update_pointer_lock_state()
			window.set_mouse_lock(false)
			return true
		end
	else
		if action_id == UNLOCK_POINTER and action.released then
			local skip_events = pointer.locked
			pointer.locked = false
			window.set_mouse_lock(false)
			return skip_events
		elseif action_id == LOCK_POINTER and action.released then
			if not pointer.locked then
				pointer.locked = true
				window.set_mouse_lock(true)
				return true
			end
		end
	end
end
